# NVIDIA Dynamo Configuration for Disaggregated Prefill/Decode
# This demonstrates the configuration for conditional disaggregation

model: "llama-70b"

# Disaggregated router configuration
disaggregated_router:
  enable: true
  policies:
    - metric: prefill_length  # Prompt length in tokens (after any prefix cache hit)
      threshold: 256
      action: prefer_remote  # if prompt > 256 tokens, vote to offload prefill
      weight: 0.7
    
    - metric: prefill_queue_depth  # number of requests queued for prefill workers
      threshold: 10
      action: prefer_local  # if queue > 10, lean towards doing prefill locally
      weight: 0.3
  
  remote_prefill_min_score: 0.5  # overall vote threshold to decide on remote prefill

# Split policy configuration
split_policy:
  prompt_length_threshold: 256
  prefix_cache_weight: 10.0
  queue_length_weight: 1.5
  decode_load_weight: 0.5
  enable_hotspot_prevention: true

# Cache configuration
cache:
  reuse_prefix: true
  min_cache_hit_ratio: 0.75

# Autoscaling configuration
autoscale:
  prefill:
    min_replicas: 4
    max_replicas: 12
    scale_up:
      queue_length: 8
      gpu_utilization: 80
    scale_down:
      queue_length: 2
      gpu_utilization: 40
  
  decode:
    min_replicas: 8
    max_replicas: 24
    scale_up:
      queue_length: 16
      kv_cache_usage: 75
    scale_down:
      queue_length: 4
      kv_cache_usage: 30

# QoS configuration
qos:
  enable_early_rejection: true
  low_priority_threshold_ms: 500
  reject_on_slo_violation: true

# Worker roles configuration
roles:
  - name: prefill_worker  # Prefill worker role
    model_path: models/llm-70b
    instance_count: 4  # 4 prefill workers
    gpu_type: B200  # B200 compute-bound prefill
  
  - name: decode_worker  # Decode worker role
    model_path: models/llm-70b
    instance_count: 8  # 8 decode workers
    gpu_type: B300  # B300 high-memory decode

# Network configuration for NIXL transfers
network:
  nixl:
    enable: true
    transfer_method: "rdma"  # Use RDMA for GPU-to-GPU transfers
    buffer_size_mb: 1024
    max_concurrent_transfers: 8
  
  interconnect:
    type: "nvlink"  # or "infiniband"
    bandwidth_gbps: 1800
    latency_us: 2.5

# Monitoring and metrics
monitoring:
  metrics_interval_seconds: 5
  enable_prometheus: true
  enable_grafana: true
  
  alerts:
    - name: "high_ttft"
      condition: "ttft_p95 > 200ms"
      severity: "warning"
    
    - name: "high_tpot"
      condition: "tpot_p95 > 50ms"
      severity: "warning"
    
    - name: "queue_overflow"
      condition: "prefill_queue_length > 20"
      severity: "critical"
    
    - name: "gpu_utilization_low"
      condition: "gpu_utilization < 60%"
      severity: "info"

# Performance tuning
performance:
  prefill:
    max_batch_size: 16
    min_batch_size: 1
    dynamic_batching: true
    batching_timeout_ms: 10
  
  decode:
    continuous_batching: true
    max_concurrent_sequences: 100
    kv_cache_offload: true
    kv_cache_compression: "fp16"

# Memory management
memory:
  kv_cache:
    max_size_gb: 100
    offload_to_cpu: true
    offload_to_nvme: false
    compression_ratio: 0.5
  
  model_weights:
    precision: "fp16"
    quantization: "none"  # or "int8", "int4"

# Logging configuration
logging:
  level: "info"
  format: "json"
  output: "stdout"
  
  # Log specific events
  events:
    - "routing_decisions"
    - "cache_hits"
    - "slo_violations"
    - "autoscaling_events"

# Security configuration
security:
  authentication:
    enable: true
    method: "token"
  
  authorization:
    enable: true
    role_based_access: true
  
  encryption:
    data_in_transit: true
    data_at_rest: false

# Backup and recovery
backup:
  enable: true
  interval_hours: 24
  retention_days: 7
  
  kv_cache:
    backup_enabled: false  # Usually not needed for KV cache
    restore_enabled: false

# Development and debugging
debug:
  enable_profiling: false
  enable_tracing: false
  log_level: "debug"
  
  # Performance debugging
  profile_events:
    - "prefill_computation"
    - "kv_cache_transfer"
    - "decode_generation"
    - "routing_decision"
